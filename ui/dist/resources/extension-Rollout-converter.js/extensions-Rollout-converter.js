(()=>{"use strict";const e=window.React;var n,t;n=window,null==(t=null==n?void 0:n.extensionsAPI)||t.registerResourceExtension((({resource:n})=>{const[t,a]=e.useState(null);return e.useEffect((()=>{var e;const t=(null==(e=n.metadata)?void 0:e.annotations)||{},o=t["argocd.argoproj.io/instance"]||t["app.kubernetes.io/instance"];var i,r,s;o?(i=void 0,r=null,s=function*(){var e;try{const t=yield fetch(`/api/v1/applications/${o}/manifests`,{credentials:"include"});if(!t.ok)throw new Error("Failed to fetch manifests");const i=yield t.json(),r=(null!=(e=null==i?void 0:i.manifests)?e:[]).find((e=>{var t,a;return"Deployment"===e.kind&&e.apiVersion===n.apiVersion&&(null==(t=e.metadata)?void 0:t.name)===n.name&&(null==(a=e.metadata)?void 0:a.namespace)===n.namespace}));a(r||null)}catch(e){console.error("Error fetching desired manifest:",e),a(null)}},new Promise(((e,n)=>{var t=e=>{try{o(s.next(e))}catch(e){n(e)}},a=e=>{try{o(s.throw(e))}catch(e){n(e)}},o=n=>n.done?e(n.value):Promise.resolve(n.value).then(t,a);o((s=s.apply(i,r)).next())}))):console.warn("Application name not found in annotations")}),[n]),e.createElement("div",{},e.createElement("h3",{},"Desired Deployment Manifest"),t?e.createElement("pre",{style:{background:"#f4f4f4",padding:"1rem",borderRadius:"8px",overflowX:"auto",fontSize:"12px"}},JSON.stringify(t,null,2)):e.createElement("p",{},"Manifest not found."))}),"apps","Deployment","YAML Viewer"),(window.tmp=window.tmp||{}).extensions={}})();